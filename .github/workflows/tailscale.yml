name: build-swoole-cli-windows-cygwin

on: [ push, pull_request ]

jobs:
  windows-tailscale:
    if: 0
    runs-on: windows-2022
    steps:
      - name: Show Environment Info
        shell: cmd
        run: |
          ver
          wmic cpu get name, caption, maxclockspeed, status
          systeminfo
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"
          systeminfo | findstr /B /C:"Manufacturer" /C:"Product" /C:"Version"
          set
          ipconfig
          uname -a
          pwd
          ipconfig /all

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global core.ignorecase false
          git config --global --add safe.directory ${{ github.workspace }}
          ipconfig

      - uses: actions/checkout@v4
      - name: Prepare submodule
        run: |
          ipconfig /all
          # git submodule update --init

      - name: Cache cygwin packages
        id: cache-cygwin
        uses: actions/cache@v4
        env:
          cache-name: cache-cygwin-packages
        with:
          path: C:\cygwin-packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Cache pool
        id: cache-cygwin-pool
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}\\pool\\"
          key: ${{ runner.os }}-build-pool-cache

      - name: enable Tailscale
        run: |
          # windows 包安装工具
          # Scoop‌、‌Chocolatey 和 winget

          # Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force  # 启用脚本执行权限‌
          # irm get.scoop.sh | iex  # 自动安装到用户目录‌
          # .\install.ps1 -ScoopDir 'D:\Scoop' -ScoopGlobalDir 'D:\GlobalScoopApps'  # 需手动下载安装脚本‌

          # Set-ExecutionPolicy Bypass -Scope Process -Force
          # irm  https://community.chocolatey.org/install.ps1 -outfile install.ps1
          # ls C:\ProgramData\chocolatey\lib\bind-toolsonly\tools\content

          # Winget 默认预装于 Win11/Server 2022+

          # scoop install bind tailscale
          # winget install "BIND Tools"
          # choco install bind-toolsonly
          choco install coreutils
          choco install tailscale
          # Get-Content -Path "C:\ProgramData\chocolatey\logs\chocolatey.log"
          # cat "C:\ProgramData\chocolatey\logs\chocolatey.log"
          # choco info tailscale

          # echo "199.38.181.239 pkgs.tailscale.com" >> "C:\Windows\System32\drivers\etc\hosts"
          # dig pkgs.tailscale.com
          # ping pkgs.tailscale.com
          # curl.exe -fSLo tailscale-setup-1.82.0-amd64.msi https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi
          # msiexec /i tailscale-setup-1.82.0-amd64.msi


          # curl  https://get.acme.sh | sh
          # tailscale logout
          # headscale  是 tailscale 服务端实现
          # unix_socket: /var/run/headscale/headscale.sock
          # ss -tulnp|grep headscale
          # tailscale up --login-server=协调服务器地址

          dir "C:\\ProgramData\\chocolatey"
          dir "C:\\ProgramData\\chocolatey\\bin"
          $env:PATH += ";C:\\ProgramData\\chocolatey\\bin"
          $env:PATH += ";C:\Program Files\Tailscale"
          dir "C:\Program Files\Tailscale"
          where.exe tailscale

          tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}
          tailscale status
          # tailscale netcheck
          # sudo socat TCP-LISTEN:8080,reuseaddr,fork,crnl EXEC:"bash -i",pty,stderr,setsid,sigint,raw,echo=0,crnl

      - name: enable openssh server
        run:
          irm https://gitee.com/jingjingxyk/swoole-cli/raw/new_dev/sapi/quickstart/windows/openssh/enable-openssh.ps1 | iex
      - name: terminal
        run:
          Start-Sleep -s 3600

      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@v2
        with:
          site: https://mirrors.kernel.org/sourceware/cygwin/
        # with:
        #  platform: x64
        #  packages: make wget tar libtool re2c bison gcc-g++ autoconf automake openssl libpcre2-devel libssl-devel libcurl-devel libxml2-devel libxslt-devel libgmp-devel ImageMagick libpng-devel libjpeg-devel libfreetype-devel libwebp-devel libsqlite3-devel zlib-devel libbz2-devel liblz4-devel liblzma-devel libzip-devel libicu-devel libonig-devel libcares-devel libsodium-devel libyaml-devel libMagick-devel libzstd-devel libbrotli-devel libreadline-devel  libintl-devel libpq-devel libssh2-devel libidn2-devel gettext-devel coreutils openssl-devel zip unzip

      - name: Install Cygwin Packages with bash
        if: 0
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          ls -lah /cygdrive/c/
          ls -lah /cygdrive/d/
          cp -f /cygdrive/c/setup.exe  /cygdrive/c/cygwin/bin/setup-x86_64.exe
          bash ./sapi/scripts/cygwin/install-cygwin.sh

      - name: Install Cygwin Packages with powershell
        # 备注：github action 在 windows 上执行命令默认的 shell 是 powershell，如果要使用其它shell , 需要手动指定，例如此也可以使用 bash 来安装 cygwin packages
        if: 1
        run: |
          Copy-Item -Path "C:\setup.exe" -Destination "${{ github.workspace }}\setup-x86_64.exe"
          cmd /c .\sapi\quickstart\windows\cygwin-build\install-cygwin.bat

      - name: Install re2c
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          bash ./sapi/scripts/cygwin/install-re2c.sh

      - name: Prepare
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          # git config --global --add safe.directory /cygdrive/d/a/swoole-cli/swoole-cli
          # git submodule update --init
          bash ./sapi/scripts/cygwin/cygwin-config-ext.sh
          sleep 10800

      - name: Configure
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          bash ./sapi/scripts/cygwin/cygwin-config.sh

      - name: Build
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          bash ./sapi/scripts/cygwin/cygwin-build.sh

      - name: Show Build Result
        run: |
          ./bin/swoole-cli -v
          ./bin/swoole-cli -m
          ./bin/swoole-cli --ri pdo_pgsql
          ./bin/swoole-cli --ri swoole
          ./bin/swoole-cli -r "echo PHP_VERSION;"

      - name: get app version with bash
        # 参考 https://github.com/marketplace/actions/install-cygwin
        shell: C:\cygwin\bin\bash.EXE --noprofile --norc -e -o pipefail -o igncr   {0}
        # shell: C:\cygwin\bin\bash.EXE --login --noprofile --norc -e -o pipefail -o igncr   {0}
        run: |
          ./bin/swoole-cli  -v | awk '{print $2}'

          APP_VERSION=$(./bin/swoole-cli  -v | awk '{print $2}')
          echo $APP_VERSION
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: get app version with PowerShell
        run: |
          ./bin/swoole-cli  -v
          $cmdOutput=./bin/swoole-cli  -v
          $cmdOutput -match "(\d{1,2}\.\d{1,2}\.\d{1,2})"
          $CYGWIN_APP_VERSION=$Matches[1]
          echo $CYGWIN_APP_VERSION
          echo "CYGWIN_APP_VERSION=$CYGWIN_APP_VERSION" >> $Env:GITHUB_ENV

          # 参考 https://github.com/orgs/community/discussions/26641
          # echo "APP_VERSION=${APP_VERSION}" >> $Env:GITHUB_ENV
          # echo "APP_VERSION=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          # Add-Content -Path $env:GITHUB_ENV -Value "name=$value"
          # Add-Content -Path $env:GITHUB_ENV -Value "APP_VERSION=$APP_VERSION"

      - name: Archive
        run: |
          bash ./sapi/scripts/cygwin/cygwin-archive.sh
